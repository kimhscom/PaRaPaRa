<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="para.member">


<!-- 담당자(관리자) 로그인 -->
<select id="adminLogin" parameterType="AdminDto" resultType="AdminDto">
	SELECT ADMIN_ID, ADMIN_NAME, ADMIN_PHONE, ADMIN_EMAIL, LOC_CODE, AUTH, ADMIN_DELFLAG, LOC_SIDO||' '||LOC_SIGUNGU AS LOC_NAME
	FROM ADMIN JOIN LOCATION USING(LOC_CODE)
	WHERE ADMIN_ID = #{admin_id} AND ADMIN_PW = #{admin_pw} AND ADMIN_DELFLAG='N'
</select>

<!-- 업주 로그인 -->
<select id="ownerLogin" parameterType="OwnerDto" resultType="OwnerDto">
	SELECT OWNER_SEQ, OWNER_ID, OWNER_NAME, OWNER_PHONE, OWNER_EMAIL, AUTH, STORE_CODE, OWNER_START, OWNER_MENU, OWNER.ADMIN_ID, STORE_NAME
	FROM OWNER JOIN STORE USING(STORE_CODE)
	WHERE OWNER_ID= #{owner_id} AND OWNER_PW= #{owner_pw} AND OWNER_END IS NULL
</select>

<!-- 로그인 시 Spring security의 match 사용을 위한 담당자 비밀번호 가져오기  -->
<select id="selAdminPw" parameterType="java.lang.String" resultType="java.lang.String">
	SELECT ADMIN_PW FROM ADMIN WHERE ADMIN_ID = #{admin_id}
</select>

<!-- 로그인 시 Spring security의 match 사용을 위한 업주 비밀번호 가져오기  -->
<select id="selOwnerPw" parameterType="java.lang.String" resultType="java.lang.String">
	SELECT OWNER_PW FROM OWNER WHERE OWNER_ID = #{owner_id}
</select>

<!-- 담당자 비밀번호 찾기: 아이디와 이메일을 입력받아 존재하는 경우, 임시 비밀번호를 생성해서 이메일로 보냄 -->
<update id="findAdminPw" parameterType="java.util.Map">
	UPDATE ADMIN 
	SET ADMIN_PW = #{temp_pw} 
	WHERE ADMIN_EMAIL = #{admin_email} AND ADMIN_ID = #{admin_id}
</update>

<!-- 업주 비밀번호 찾기: 아이디와 이메일을 입력받아 존재하는 경우, 임시 비밀번호를 생성해서 이메일로 보냄 -->
<update id="findOwnerPw" parameterType="java.util.Map">
	UPDATE OWNER 
	SET OWNER_PW = #{temp_pw} 
	WHERE OWNER_EMAIL = #{owner_email} AND OWNER_ID = #{owner_id}
</update>

<!-- 담당자 회원등록 -->
<insert id="adminRegister" parameterType="AdminDto">
	INSERT INTO ADMIN
	(ADMIN_ID, ADMIN_PW, ADMIN_NAME, ADMIN_PHONE, ADMIN_EMAIL, LOC_CODE, AUTH, ADMIN_DELFLAG)
	VALUES(#{admin_id}, #{admin_pw}, #{admin_name}, #{admin_phone}, #{admin_email}, #{loc_code}, 'A', 'N')
</insert>

<!-- 업주 회원등록 -->
<insert id="ownerRegister" parameterType="OwnerDto">
	INSERT INTO OWNER
	(OWNER_SEQ, OWNER_ID, OWNER_PW, OWNER_NAME, OWNER_PHONE, OWNER_EMAIL, AUTH, STORE_CODE, OWNER_START, OWNER_MENU, ADMIN_ID)
	VALUES(OWNER_SEQ.NEXTVAL, #{owner_id}, #{owner_pw}, #{owner_name}, #{owner_phone}, #{owner_email}, 'U', #{store_code}, #{owner_start}, #{owner_menu}, #{admin_id})
</insert>

<!-- 담당자 정보 수정: 새비밀번호, 이름, 전화번호, 이메일 수정 가능 (구분:admin_id) -->
<update id="adminModify" parameterType="AdminDto">
	UPDATE ADMIN 
	<trim prefix="SET" suffixOverrides=",">
		<if test="admin_pw != null">ADMIN_PW = #{admin_pw},</if>
		<if test="admin_name != null">ADMIN_NAME = #{admin_name},</if>
		<if test="admin_phone != null">ADMIN_PHONE = #{admin_phone},</if>
		<if test="admin_email != null">ADMIN_EMAIL = #{admin_email}</if>
	</trim>
	WHERE ADMIN_ID = #{admin_id}
</update>

<!-- 업주 정보 수정: 새비밀번호, 이름, 전화번호, 이메일 수정 가능 (구분:owner_seq) -->
<update id="ownerModify" parameterType="OwnerDto">
	UPDATE OWNER
	<trim prefix="SET" suffixOverrides=",">
		<if test="owner_pw != null">OWNER_PW = #{owner_pw},</if>
		<if test="owner_name != null">OWNER_NAME = #{owner_name},</if>
		<if test="owner_phone != null">OWNER_PHONE = #{owner_phone},</if>
		<if test="owner_email != null">OWNER_EMAIL = #{owner_email}</if>
	</trim>
	WHERE OWNER_SEQ = #{owner_seq}
</update>

<!-- 담당자 전체 조회 - 페이징 -->
<select id="adminList" parameterType="java.util.Map" resultType="AdminDto">
	SELECT ADMIN_ID, ADMIN_NAME, ADMIN_PHONE, ADMIN_EMAIL, LOC_CODE, AUTH, ADMIN_DELFLAG, LOC_NAME
	FROM (SELECT ROW_NUMBER() OVER(ORDER BY ADMIN_DELFLAG, ADMIN_ID) RNUM, ADMIN_ID, ADMIN_PW, 
			ADMIN_NAME, ADMIN_PHONE, ADMIN_EMAIL, LOC_CODE, AUTH, ADMIN_DELFLAG, LOC_SIGUNGU AS LOC_NAME
		  FROM ADMIN JOIN LOCATION USING(LOC_CODE)
		  WHERE AUTH='A' AND ADMIN_DELFLAG=#{admin_delflag})
	WHERE RNUM BETWEEN #{start} AND #{end} 
</select>

<!-- 페이징 처리를 위한 전체 담당자 수 -->
<select id="adminListRow" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT COUNT(*) FROM ADMIN WHERE AUTH='A' AND ADMIN_DELFLAG=#{admin_delflag}
</select>

<!-- 담당자 지역별 조회 - 페이징 -->
<select id="adminLocList" parameterType="java.util.Map" resultType="AdminDto">
	SELECT ADMIN_ID, ADMIN_NAME, ADMIN_PHONE, ADMIN_EMAIL, LOC_CODE, AUTH, ADMIN_DELFLAG, LOC_NAME
	FROM (SELECT ROW_NUMBER() OVER(ORDER BY ADMIN_DELFLAG, ADMIN_ID) RNUM, ADMIN_ID, ADMIN_PW, 
			ADMIN_NAME, ADMIN_PHONE, ADMIN_EMAIL, LOC_CODE, AUTH, ADMIN_DELFLAG, LOC_SIGUNGU AS LOC_NAME
  	  	  FROM ADMIN JOIN LOCATION USING(LOC_CODE)
  	      WHERE AUTH='A' AND ADMIN_DELFLAG='N' AND LOC_CODE LIKE #{loc_sido}||'%')
	WHERE RNUM BETWEEN #{start} AND #{end}
</select>

<!-- 페이징 처리를 위한 지역별 담당자 수 -->
<select id="adminLocListRow" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT COUNT(*) FROM ADMIN WHERE AUTH='A' AND ADMIN_DELFLAG='N' AND LOC_CODE LIKE #{loc_sido}||'%'
</select>

<!-- 업주 전체 조회 - 페이징 -->
<select id="ownerList" parameterType="java.util.Map" resultType="OwnerDto">
	SELECT OWNER_SEQ, OWNER_ID, OWNER_NAME, OWNER_PHONE, OWNER_EMAIL, STORE_CODE, OWNER_START, OWNER_END, STORE_NAME
	FROM (SELECT ROW_NUMBER() OVER(ORDER BY OWNER_SEQ) RNUM, OWNER_SEQ, OWNER_ID, OWNER_PW, 
			OWNER_NAME, OWNER_PHONE, OWNER_EMAIL, AUTH, STORE_CODE, 
			TO_CHAR(OWNER_START,'YYYY-MM-DD') AS OWNER_START, OWNER_END, STORE_NAME
	 	  FROM OWNER JOIN STORE USING(STORE_CODE)
	 	  WHERE STORE_CODE IN (SELECT STORE_CODE FROM STORE WHERE LOC_CODE = #{loc_code}))
	WHERE RNUM BETWEEN #{start} AND #{end}
</select>

<!-- 페이징 처리를 위한 전체 업주 수 -->
<select id="ownerListRow" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT COUNT(*) FROM OWNER 
	WHERE STORE_CODE IN (SELECT STORE_CODE FROM STORE WHERE LOC_CODE = #{loc_code})
</select>

<!-- 담당자 삭제 (진짜 삭제 아닌 DELFLAG Y로 업데이트) -->
<update id="adminDelete" parameterType="java.lang.String">
	UPDATE ADMIN SET ADMIN_DELFLAG='Y' WHERE ADMIN_ID = #{admin_id}
</update>

<!-- 업주 삭제 (진짜 삭제 아닌, 계약 종료일 업데이트) -->
<update id="ownerDelete" parameterType="java.util.Map">
	UPDATE OWNER SET OWNER_END= #{owner_end} WHERE OWNER_SEQ = #{owner_seq}
</update>

<!-- 업주 등록을 위한 연결되지 않은 매장 가져오기 해당 담당자만 -->
<select id="selStoreCodeList" resultType="java.lang.String" parameterType="java.lang.String">
	SELECT STORE_CODE FROM STORE WHERE OWNER_REG='0' AND ADMIN_ID =#{admin_id}
</select>

<!-- 업주 등록시 OWNER_REG 1로, 업주 삭제시 OWNER_REG 0으로 값 전달 -->
<update id="storeOwnerRegi" parameterType="java.util.Map">
	UPDATE STORE SET OWNER_REG = #{owner_reg} 
	WHERE STORE_CODE =#{store_code}
</update>

<!-- 담당자 등록 시 ID 중복검사 -->
<select id="adminIdDupleChk" parameterType="java.lang.String" resultType="java.lang.Integer" >
	 SELECT COUNT(ADMIN_ID) 
	 FROM ADMIN 
	 WHERE ADMIN_ID = #{admin_id}
</select>

<!-- 업주 등록 시 ID 중복검사 -->
<select id="ownerIdDupleChk" parameterType="java.lang.String" resultType="java.lang.Integer">
	 SELECT COUNT(OWNER_ID) 
	 FROM OWNER 
	 WHERE OWNER_ID = #{owner_id}
</select>

<!-- 담당자: 비밀번호 찾기에 사용할 아이디/이메일 해당하는 계정 존재 여부 검증 -->
<select id="findPwChkAdmin" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT COUNT(*) 
	FROM ADMIN 
	WHERE ADMIN_ID=#{admin_id} AND ADMIN_EMAIL=#{admin_email}
</select>

<!-- 업주: 비밀번호 찾기에 사용할 아이디/이메일 해당하는 계정 존재 여부 검증  -->
<select id="findPwChkOwner" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT COUNT(*) 
	FROM OWNER 
	WHERE OWNER_ID=#{owner_id} AND OWNER_EMAIL=#{owner_email}
</select>

<!-- 담당하는 업주 전체 조회 -->
<select id="ownerListAll" parameterType="java.lang.String" resultType="OwnerDto">
	SELECT OWNER_SEQ, OWNER_ID, OWNER_PW, OWNER_NAME, OWNER_PHONE, OWNER_EMAIL, AUTH, STORE_CODE, 
	TO_CHAR(OWNER_START,'YYYY-MM-DD') AS OWNER_START, OWNER_END, STORE_NAME
	FROM OWNER JOIN STORE USING(STORE_CODE)
	WHERE STORE_CODE IN (SELECT STORE_CODE FROM STORE WHERE LOC_CODE = #{loc_code})
</select>

<!-- 관리자 담당업주 전체 조회 -->
<select id="adminListAll" resultType="AdminDto">
	SELECT ADMIN_NAME, LOC_CODE, LOC_SIGUNGU AS LOC_NAME
	FROM ADMIN JOIN LOCATION USING(LOC_CODE)
	WHERE AUTH='A' AND ADMIN_DELFLAG='N'
</select>
</mapper>
